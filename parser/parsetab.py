
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION AND ARROW CLOSELIST COLON COMMA DOT ENDLABELS ENDMODULE ENDOPTIONS EQUAL GUARD ID IMPORT INIT INT LABELS MODULE NOT OPENLIST OPTCONDEFFECTS OPTIONS PARAMS PREDICATE SEMICOLON ST\n    program : import labels module options\n    \n    nil :\n    \n    import : IMPORT path\n    \n    path : ID path\n         | DOT path\n         | nil\n    \n    labels : LABELS labellist ENDLABELS\n    \n    module : MODULE automata ENDMODULE\n    \n    options : OPTIONS optionlist ENDOPTIONS\n            | OPTIONS ENDOPTIONS\n            | nil\n    \n    optionlist : option\n               | option optionlist\n    \n    option : OPTCONDEFFECTS SEMICOLON\n    \n    labellist : label\n              | label COMMA labellist\n              | nil\n    \n    label : ID COLON OPENLIST act_or_pred_list CLOSELIST\n    \n    act_or_pred_list : act_or_pred\n                     | act_or_pred AND act_or_pred_list\n    \n    act_or_pred : ACTION COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST\n                | PREDICATE COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST\n                | PREDICATE COLON NOT ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST\n                | nil\n    \n    param_dec : ID\n              | ID COMMA param_dec\n              | nil\n    \n    automata : state_dec_wrapper cond_dec_wrapper trel\n             | state_dec_wrapper trel\n             | nil\n    \n    cond_dec_wrapper : GUARD COLON OPENLIST cond_dec CLOSELIST SEMICOLON\n    \n    cond_dec : INT COLON ID\n             | INT COLON INIT\n             | INT COLON ID COMMA cond_dec\n             | INT COLON INIT COMMA cond_dec\n             | nil\n    \n    state_dec_wrapper : ST COLON OPENLIST state_dec CLOSELIST SEMICOLON\n    \n    state_dec : INT COLON ID\n              | INT COLON INIT\n              | INT COLON ID COMMA state_dec\n              | INT COLON INIT COMMA state_dec\n              | nil\n    \n    trel : event boolexp ARROW INT SEMICOLON trel\n         | nil\n    \n    event : OPENLIST CLOSELIST\n          | OPENLIST ID CLOSELIST\n    \n    boolexp : INT AND GUARD EQUAL ID\n            | INT AND GUARD EQUAL INT\n            | INT\n    '
    
_lr_action_items = {'IMPORT':([0,],[3,]),'$end':([1,10,18,20,29,32,42,],[0,-2,-1,-11,-10,-8,-9,]),'LABELS':([2,3,6,7,8,9,16,17,],[5,-2,-3,-2,-2,-6,-4,-5,]),'ID':([3,5,7,8,26,36,66,67,74,78,80,82,109,110,116,117,],[7,15,7,7,15,48,76,77,84,88,90,94,112,112,112,112,]),'DOT':([3,7,8,],[8,8,8,]),'MODULE':([4,25,],[11,-7,]),'ENDLABELS':([5,12,13,14,26,40,64,],[-2,25,-15,-17,-2,-16,-18,]),'OPTIONS':([10,32,],[19,-8,]),'ST':([11,],[24,]),'ENDMODULE':([11,21,22,23,33,34,38,45,81,83,89,92,],[-2,32,-2,-30,-2,-29,-44,-28,-2,-37,-31,-43,]),'COMMA':([13,64,76,77,84,85,88,90,91,112,],[26,-18,86,87,95,96,99,100,101,117,]),'COLON':([15,24,35,54,55,62,69,97,98,106,],[27,39,46,66,67,74,80,104,105,111,]),'ENDOPTIONS':([19,28,30,43,44,],[29,42,-12,-13,-14,]),'OPTCONDEFFECTS':([19,30,44,],[31,31,-14,]),'GUARD':([22,60,83,],[35,72,-37,]),'OPENLIST':([22,27,33,39,46,81,83,89,104,105,111,],[36,41,36,51,57,36,-37,-31,109,110,116,]),'SEMICOLON':([31,71,73,79,],[44,81,83,89,]),'CLOSELIST':([36,41,48,51,52,53,56,57,61,63,65,68,70,75,84,85,90,91,95,96,100,101,102,103,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,],[47,-2,58,-2,64,-19,-24,-2,73,-42,-2,79,-36,-20,-38,-39,-32,-33,-2,-2,-2,-2,-40,-41,-34,-35,-2,-2,-25,118,-27,119,-2,-2,-21,-22,122,-26,-23,]),'INT':([37,47,51,57,58,59,82,95,96,100,101,],[50,-45,62,69,-46,71,93,62,62,69,69,]),'ACTION':([41,65,],[54,54,]),'PREDICATE':([41,65,],[55,55,]),'AND':([41,50,53,56,65,118,119,122,],[-2,60,65,-24,-2,-21,-22,-23,]),'ARROW':([49,50,93,94,],[59,-49,-48,-47,]),'NOT':([67,],[78,]),'EQUAL':([72,],[82,]),'INIT':([74,80,],[85,91,]),'PARAMS':([86,87,99,],[97,98,106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'import':([0,],[2,]),'labels':([2,],[4,]),'path':([3,7,8,],[6,16,17,]),'nil':([3,5,7,8,10,11,22,26,33,41,51,57,65,81,95,96,100,101,109,110,116,117,],[9,14,9,9,20,23,38,14,38,56,63,70,56,38,63,63,70,70,114,114,114,114,]),'module':([4,],[10,]),'labellist':([5,26,],[12,40,]),'label':([5,26,],[13,13,]),'options':([10,],[18,]),'automata':([11,],[21,]),'state_dec_wrapper':([11,],[22,]),'optionlist':([19,30,],[28,43,]),'option':([19,30,],[30,30,]),'cond_dec_wrapper':([22,],[33,]),'trel':([22,33,81,],[34,45,92,]),'event':([22,33,81,],[37,37,37,]),'boolexp':([37,],[49,]),'act_or_pred_list':([41,65,],[52,75,]),'act_or_pred':([41,65,],[53,53,]),'state_dec':([51,95,96,],[61,102,103,]),'cond_dec':([57,100,101,],[68,107,108,]),'param_dec':([109,110,116,117,],[113,115,120,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> import labels module options','program',4,'p_program','lexer_and_parser.py',133),
  ('nil -> <empty>','nil',0,'p_nil','lexer_and_parser.py',140),
  ('import -> IMPORT path','import',2,'p_import','lexer_and_parser.py',147),
  ('path -> ID path','path',2,'p_path','lexer_and_parser.py',154),
  ('path -> DOT path','path',2,'p_path','lexer_and_parser.py',155),
  ('path -> nil','path',1,'p_path','lexer_and_parser.py',156),
  ('labels -> LABELS labellist ENDLABELS','labels',3,'p_labels','lexer_and_parser.py',164),
  ('module -> MODULE automata ENDMODULE','module',3,'p_module','lexer_and_parser.py',174),
  ('options -> OPTIONS optionlist ENDOPTIONS','options',3,'p_options','lexer_and_parser.py',181),
  ('options -> OPTIONS ENDOPTIONS','options',2,'p_options','lexer_and_parser.py',182),
  ('options -> nil','options',1,'p_options','lexer_and_parser.py',183),
  ('optionlist -> option','optionlist',1,'p_optionlist','lexer_and_parser.py',190),
  ('optionlist -> option optionlist','optionlist',2,'p_optionlist','lexer_and_parser.py',191),
  ('option -> OPTCONDEFFECTS SEMICOLON','option',2,'p_option','lexer_and_parser.py',198),
  ('labellist -> label','labellist',1,'p_labellist','lexer_and_parser.py',205),
  ('labellist -> label COMMA labellist','labellist',3,'p_labellist','lexer_and_parser.py',206),
  ('labellist -> nil','labellist',1,'p_labellist','lexer_and_parser.py',207),
  ('label -> ID COLON OPENLIST act_or_pred_list CLOSELIST','label',5,'p_label','lexer_and_parser.py',220),
  ('act_or_pred_list -> act_or_pred','act_or_pred_list',1,'p_act_or_pred_list','lexer_and_parser.py',227),
  ('act_or_pred_list -> act_or_pred AND act_or_pred_list','act_or_pred_list',3,'p_act_or_pred_list','lexer_and_parser.py',228),
  ('act_or_pred -> ACTION COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST','act_or_pred',9,'p_act_or_pred','lexer_and_parser.py',238),
  ('act_or_pred -> PREDICATE COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST','act_or_pred',9,'p_act_or_pred','lexer_and_parser.py',239),
  ('act_or_pred -> PREDICATE COLON NOT ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST','act_or_pred',10,'p_act_or_pred','lexer_and_parser.py',240),
  ('act_or_pred -> nil','act_or_pred',1,'p_act_or_pred','lexer_and_parser.py',241),
  ('param_dec -> ID','param_dec',1,'p_param_dec','lexer_and_parser.py',251),
  ('param_dec -> ID COMMA param_dec','param_dec',3,'p_param_dec','lexer_and_parser.py',252),
  ('param_dec -> nil','param_dec',1,'p_param_dec','lexer_and_parser.py',253),
  ('automata -> state_dec_wrapper cond_dec_wrapper trel','automata',3,'p_automata','lexer_and_parser.py',263),
  ('automata -> state_dec_wrapper trel','automata',2,'p_automata','lexer_and_parser.py',264),
  ('automata -> nil','automata',1,'p_automata','lexer_and_parser.py',265),
  ('cond_dec_wrapper -> GUARD COLON OPENLIST cond_dec CLOSELIST SEMICOLON','cond_dec_wrapper',6,'p_cond_dec_wrapper','lexer_and_parser.py',277),
  ('cond_dec -> INT COLON ID','cond_dec',3,'p_cond_dec','lexer_and_parser.py',284),
  ('cond_dec -> INT COLON INIT','cond_dec',3,'p_cond_dec','lexer_and_parser.py',285),
  ('cond_dec -> INT COLON ID COMMA cond_dec','cond_dec',5,'p_cond_dec','lexer_and_parser.py',286),
  ('cond_dec -> INT COLON INIT COMMA cond_dec','cond_dec',5,'p_cond_dec','lexer_and_parser.py',287),
  ('cond_dec -> nil','cond_dec',1,'p_cond_dec','lexer_and_parser.py',288),
  ('state_dec_wrapper -> ST COLON OPENLIST state_dec CLOSELIST SEMICOLON','state_dec_wrapper',6,'p_state_dec_wrapper','lexer_and_parser.py',300),
  ('state_dec -> INT COLON ID','state_dec',3,'p_state_dec','lexer_and_parser.py',307),
  ('state_dec -> INT COLON INIT','state_dec',3,'p_state_dec','lexer_and_parser.py',308),
  ('state_dec -> INT COLON ID COMMA state_dec','state_dec',5,'p_state_dec','lexer_and_parser.py',309),
  ('state_dec -> INT COLON INIT COMMA state_dec','state_dec',5,'p_state_dec','lexer_and_parser.py',310),
  ('state_dec -> nil','state_dec',1,'p_state_dec','lexer_and_parser.py',311),
  ('trel -> event boolexp ARROW INT SEMICOLON trel','trel',6,'p_trel','lexer_and_parser.py',323),
  ('trel -> nil','trel',1,'p_trel','lexer_and_parser.py',324),
  ('event -> OPENLIST CLOSELIST','event',2,'p_event','lexer_and_parser.py',337),
  ('event -> OPENLIST ID CLOSELIST','event',3,'p_event','lexer_and_parser.py',338),
  ('boolexp -> INT AND GUARD EQUAL ID','boolexp',5,'p_boolexp_wrapper','lexer_and_parser.py',348),
  ('boolexp -> INT AND GUARD EQUAL INT','boolexp',5,'p_boolexp_wrapper','lexer_and_parser.py',349),
  ('boolexp -> INT','boolexp',1,'p_boolexp_wrapper','lexer_and_parser.py',350),
]
