
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION AND ARROW CLOSELIST COLON COMMA ENDLABELS ENDMODULE ENDOPTIONS EQUAL GUARD ID IMPORT INIT INT LABELS MODULE NOT OPENLIST OPTCONDEFFECTS OPTIONS PARAMS PREDICATE SEMICOLON ST\n    program : import labels module options\n    \n    nil :\n    \n    import : IMPORT ID\n    \n    labels : LABELS labellist ENDLABELS\n    \n    module : MODULE automata ENDMODULE\n    \n    options : OPTIONS optionlist ENDOPTIONS\n            | nil\n    \n    optionlist : option\n               | option optionlist\n               | nil\n    \n    option : OPTCONDEFFECTS SEMICOLON\n    \n    labellist : cmd\n            | cmd COMMA labellist\n            | nil\n    \n    cmd : ID COLON OPENLIST act_or_pred_list CLOSELIST\n    \n    act_or_pred_list : act_or_pred\n                     | act_or_pred AND act_or_pred_list\n    \n    act_or_pred : ACTION COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST\n                | PREDICATE COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST\n                | PREDICATE COLON NOT ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST\n    \n    param_dec : ID\n              | ID COMMA param_dec\n              | nil\n    \n    automata : state_dec_wrapper cond_dec_wrapper trel\n             | state_dec_wrapper trel\n             | nil\n    \n    cond_dec_wrapper : GUARD COLON OPENLIST cond_dec CLOSELIST SEMICOLON\n    \n    cond_dec : INT COLON ID\n             | INT COLON INIT\n             | INT COLON ID COMMA cond_dec\n             | INT COLON INIT COMMA cond_dec\n             | nil\n    \n    state_dec_wrapper : ST COLON OPENLIST state_dec CLOSELIST SEMICOLON\n    \n    state_dec : INT COLON ID\n              | INT COLON INIT\n              | INT COLON ID COMMA state_dec\n              | INT COLON INIT COMMA state_dec\n              | nil\n    \n    trel : event boolexp ARROW boolexp SEMICOLON trel\n         | nil\n    \n    event : OPENLIST CLOSELIST\n          | OPENLIST ID CLOSELIST\n    \n    boolexp : boolexp AND boolexp\n            | GUARD EQUAL ID\n            | GUARD EQUAL INT\n            | INT\n            | nil\n    '
    
_lr_action_items = {'IMPORT':([0,],[3,]),'$end':([1,7,13,15,27,37,],[0,-2,-1,-7,-5,-6,]),'LABELS':([2,6,],[5,-3,]),'ID':([3,5,21,31,57,63,64,73,77,79,105,106,112,113,],[6,12,12,43,70,75,76,82,86,88,108,108,108,108,]),'MODULE':([4,20,],[8,-4,]),'ENDLABELS':([5,9,10,11,21,35,61,],[-2,20,-12,-14,-2,-13,-15,]),'OPTIONS':([7,27,],[14,-5,]),'ST':([8,],[19,]),'ENDMODULE':([8,16,17,18,28,29,33,40,80,81,87,90,],[-2,27,-2,-26,-2,-25,-40,-24,-2,-33,-27,-39,]),'COMMA':([10,61,75,76,82,83,86,88,89,108,],[21,-15,84,85,91,92,95,96,97,113,]),'COLON':([12,19,30,51,52,59,66,93,94,102,],[22,34,41,63,64,73,79,100,101,107,]),'OPTCONDEFFECTS':([14,24,39,],[26,26,-11,]),'ENDOPTIONS':([14,23,24,25,38,39,],[-2,37,-2,-10,-9,-11,]),'GUARD':([17,32,42,54,55,56,81,],[30,45,-41,-42,45,45,-33,]),'OPENLIST':([17,22,28,34,41,80,81,87,100,101,107,],[31,36,31,48,53,31,-33,-27,105,106,112,]),'SEMICOLON':([26,46,47,55,56,68,69,70,71,72,78,],[39,-46,-47,-2,-2,80,-43,-44,-45,81,87,]),'CLOSELIST':([31,43,48,49,50,53,58,60,65,67,74,82,83,88,89,91,92,96,97,98,99,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,],[42,54,-2,61,-16,-2,72,-38,78,-32,-17,-34,-35,-28,-29,-2,-2,-2,-2,-36,-37,-30,-31,-2,-2,-21,114,-23,115,-2,-2,-18,-19,118,-22,-20,]),'INT':([32,42,48,53,54,55,56,57,91,92,96,97,],[46,-41,59,66,-42,46,46,71,59,59,66,66,]),'ARROW':([32,42,44,46,47,54,56,69,70,71,],[-2,-41,55,-46,-47,-42,-2,-43,-44,-45,]),'AND':([32,42,44,46,47,50,54,55,56,68,69,70,71,114,115,118,],[-2,-41,56,-46,-47,62,-42,-2,-2,56,56,-44,-45,-18,-19,-20,]),'ACTION':([36,62,],[51,51,]),'PREDICATE':([36,62,],[52,52,]),'EQUAL':([45,],[57,]),'NOT':([64,],[77,]),'INIT':([73,79,],[83,89,]),'PARAMS':([84,85,95,],[93,94,102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'import':([0,],[2,]),'labels':([2,],[4,]),'module':([4,],[7,]),'labellist':([5,21,],[9,35,]),'cmd':([5,21,],[10,10,]),'nil':([5,7,8,14,17,21,24,28,32,48,53,55,56,80,91,92,96,97,105,106,112,113,],[11,15,18,25,33,11,25,33,47,60,67,47,47,33,60,60,67,67,110,110,110,110,]),'options':([7,],[13,]),'automata':([8,],[16,]),'state_dec_wrapper':([8,],[17,]),'optionlist':([14,24,],[23,38,]),'option':([14,24,],[24,24,]),'cond_dec_wrapper':([17,],[28,]),'trel':([17,28,80,],[29,40,90,]),'event':([17,28,80,],[32,32,32,]),'boolexp':([32,55,56,],[44,68,69,]),'act_or_pred_list':([36,62,],[49,74,]),'act_or_pred':([36,62,],[50,50,]),'state_dec':([48,91,92,],[58,98,99,]),'cond_dec':([53,96,97,],[65,103,104,]),'param_dec':([105,106,112,113,],[109,111,116,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> import labels module options','program',4,'p_program','lexer_and_parser.py',136),
  ('nil -> <empty>','nil',0,'p_nil','lexer_and_parser.py',143),
  ('import -> IMPORT ID','import',2,'p_import','lexer_and_parser.py',150),
  ('labels -> LABELS labellist ENDLABELS','labels',3,'p_labels','lexer_and_parser.py',157),
  ('module -> MODULE automata ENDMODULE','module',3,'p_module','lexer_and_parser.py',167),
  ('options -> OPTIONS optionlist ENDOPTIONS','options',3,'p_options','lexer_and_parser.py',174),
  ('options -> nil','options',1,'p_options','lexer_and_parser.py',175),
  ('optionlist -> option','optionlist',1,'p_optionlist','lexer_and_parser.py',193),
  ('optionlist -> option optionlist','optionlist',2,'p_optionlist','lexer_and_parser.py',194),
  ('optionlist -> nil','optionlist',1,'p_optionlist','lexer_and_parser.py',195),
  ('option -> OPTCONDEFFECTS SEMICOLON','option',2,'p_option','lexer_and_parser.py',207),
  ('labellist -> cmd','labellist',1,'p_labellist','lexer_and_parser.py',214),
  ('labellist -> cmd COMMA labellist','labellist',3,'p_labellist','lexer_and_parser.py',215),
  ('labellist -> nil','labellist',1,'p_labellist','lexer_and_parser.py',216),
  ('cmd -> ID COLON OPENLIST act_or_pred_list CLOSELIST','cmd',5,'p_cmd','lexer_and_parser.py',229),
  ('act_or_pred_list -> act_or_pred','act_or_pred_list',1,'p_act_or_pred_list','lexer_and_parser.py',236),
  ('act_or_pred_list -> act_or_pred AND act_or_pred_list','act_or_pred_list',3,'p_act_or_pred_list','lexer_and_parser.py',237),
  ('act_or_pred -> ACTION COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST','act_or_pred',9,'p_act_or_pred','lexer_and_parser.py',247),
  ('act_or_pred -> PREDICATE COLON ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST','act_or_pred',9,'p_act_or_pred','lexer_and_parser.py',248),
  ('act_or_pred -> PREDICATE COLON NOT ID COMMA PARAMS COLON OPENLIST param_dec CLOSELIST','act_or_pred',10,'p_act_or_pred','lexer_and_parser.py',249),
  ('param_dec -> ID','param_dec',1,'p_param_dec','lexer_and_parser.py',259),
  ('param_dec -> ID COMMA param_dec','param_dec',3,'p_param_dec','lexer_and_parser.py',260),
  ('param_dec -> nil','param_dec',1,'p_param_dec','lexer_and_parser.py',261),
  ('automata -> state_dec_wrapper cond_dec_wrapper trel','automata',3,'p_automata','lexer_and_parser.py',271),
  ('automata -> state_dec_wrapper trel','automata',2,'p_automata','lexer_and_parser.py',272),
  ('automata -> nil','automata',1,'p_automata','lexer_and_parser.py',273),
  ('cond_dec_wrapper -> GUARD COLON OPENLIST cond_dec CLOSELIST SEMICOLON','cond_dec_wrapper',6,'p_cond_dec_wrapper','lexer_and_parser.py',285),
  ('cond_dec -> INT COLON ID','cond_dec',3,'p_cond_dec','lexer_and_parser.py',292),
  ('cond_dec -> INT COLON INIT','cond_dec',3,'p_cond_dec','lexer_and_parser.py',293),
  ('cond_dec -> INT COLON ID COMMA cond_dec','cond_dec',5,'p_cond_dec','lexer_and_parser.py',294),
  ('cond_dec -> INT COLON INIT COMMA cond_dec','cond_dec',5,'p_cond_dec','lexer_and_parser.py',295),
  ('cond_dec -> nil','cond_dec',1,'p_cond_dec','lexer_and_parser.py',296),
  ('state_dec_wrapper -> ST COLON OPENLIST state_dec CLOSELIST SEMICOLON','state_dec_wrapper',6,'p_state_dec_wrapper','lexer_and_parser.py',308),
  ('state_dec -> INT COLON ID','state_dec',3,'p_state_dec','lexer_and_parser.py',315),
  ('state_dec -> INT COLON INIT','state_dec',3,'p_state_dec','lexer_and_parser.py',316),
  ('state_dec -> INT COLON ID COMMA state_dec','state_dec',5,'p_state_dec','lexer_and_parser.py',317),
  ('state_dec -> INT COLON INIT COMMA state_dec','state_dec',5,'p_state_dec','lexer_and_parser.py',318),
  ('state_dec -> nil','state_dec',1,'p_state_dec','lexer_and_parser.py',319),
  ('trel -> event boolexp ARROW boolexp SEMICOLON trel','trel',6,'p_trel','lexer_and_parser.py',331),
  ('trel -> nil','trel',1,'p_trel','lexer_and_parser.py',332),
  ('event -> OPENLIST CLOSELIST','event',2,'p_event','lexer_and_parser.py',345),
  ('event -> OPENLIST ID CLOSELIST','event',3,'p_event','lexer_and_parser.py',346),
  ('boolexp -> boolexp AND boolexp','boolexp',3,'p_boolexp_wrapper','lexer_and_parser.py',356),
  ('boolexp -> GUARD EQUAL ID','boolexp',3,'p_boolexp_wrapper','lexer_and_parser.py',357),
  ('boolexp -> GUARD EQUAL INT','boolexp',3,'p_boolexp_wrapper','lexer_and_parser.py',358),
  ('boolexp -> INT','boolexp',1,'p_boolexp_wrapper','lexer_and_parser.py',359),
  ('boolexp -> nil','boolexp',1,'p_boolexp_wrapper','lexer_and_parser.py',360),
]
